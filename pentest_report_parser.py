from docx import Document
from pathlib import Path
from typing import Union
from docxtpl import DocxTemplate
from enum import Enum

HEADINGS_STYLES = ("Heading 1", "Heading 2", "Heading 3")

forbidden_paragraphs = ("positive", "negative", "observation")

class FindingType(Enum):
    Positive = "Positive"
    Negative = "Negative"
    Observation = "Observation"

class Finding():
    def __init__(self, text: str, type: FindingType, section: str) -> None:
        self.text = text
        self.type = type
        self.section = section
        

def parse_docx_file(path_to_file: Union[Path, str]) -> dict:
    """
    Loads word docx document. Searches for paragraphs with known styles, then populates the database.

    Parameters
    ----------
    `path_to_file`: `Union`[`Path`, `str`]
        Path to *.docx file to parse.

    Returns
    -------
    `dict`
        As keys names of styles, as values iterable of paragraphs found.

    """
    document = Document(path_to_file)
    output = []
    section_pointer = None
    for paragraph in document.paragraphs:
        if paragraph.style.name in HEADINGS_STYLES:
            section_pointer = paragraph.text
            continue
        if paragraph.style.name in FindingType.__members__:
            if paragraph.text.lower() not in forbidden_paragraphs and not str.isspace(paragraph.text) and paragraph.text:
                output.append(Finding(paragraph.text, FindingType[paragraph.style.name], section_pointer))
    return output


def generate_tables(context: dict) -> None:
    """
    Generates word *.docx document based on template.

    Parameters
    ----------
    `context`: `dict`
        As keys names of styles, as values iterable of paragraphs found.

    """
    doc = DocxTemplate("docxtpl_template.docx")
    doc.render(context)
    doc.save("generated_doc.docx")


db = parse_docx_file("report.docx")
context = {"findings": db}
generate_tables(context)
